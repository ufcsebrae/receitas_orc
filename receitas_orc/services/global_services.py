"""
global_services.py

Este m√≥dulo cont√©m servi√ßos globais para o projeto 'receitas_orc',
incluindo a configura√ß√£o do logger, fun√ß√µes para estabelecer conex√µes
com diferentes tipos de bancos de dados (SQL, Azure SQL, MDX) e a
execu√ß√£o centralizada de consultas, al√©m de fun√ß√µes para salvar dados.
"""

import logging
import time
import pandas as pd
import os
import sqlalchemy


from typing import Union, List, Dict
from urllib.parse import quote_plus



# Importa√ß√µes relativas para o projeto
# O setup_mdx_environment n√£o ser√° mais chamado aqui diretamente no n√≠vel do m√≥dulo
# from receitas_orc.config.mdx_setup import setup_mdx_environment
from receitas_orc.data_access.queries import CONEXOES, Consulta, consultas
from receitas_orc.data_access.query_executor import CriadorDataFrame

# A configura√ß√£o do logger (basicConfig) foi movida para main.py.
# Aqui, apenas obtemos uma inst√¢ncia do logger.
logger = logging.getLogger("logger_financa")

# O caminho da DLL n√£o deve ser hardcoded aqui, ser√° gerenciado por main.py ou uma configura√ß√£o centralizada
# dll_path = r"C:\Microsoft.AnalysisServices.AdomdClient.dll"
# setup_mdx_environment(dll_path) # Esta chamada √© removida daqui

def funcao_conexao(nome_conexao: str) -> Union[sqlalchemy.engine.base.Connection, str]:
    """
    Retorna uma conex√£o SQLAlchemy com base nas informa√ß√µes da conex√£o especificada.
    Suporta conex√µes do tipo: 'sql', 'azure_sql' e 'mdx'.

    Args:
        nome_conexao (str): O nome da conex√£o conforme definido em CONEXOES.

    Returns:
        sqlalchemy.engine.base.Connection ou str: Objeto de conex√£o ou string de conex√£o para MDX.

    Raises:
        ValueError: Se o tipo de conex√£o n√£o for suportado.
    """
    info = CONEXOES[nome_conexao]

    if info["tipo"] == "sql":
        servidor = info["servidor"]
        banco = info["banco"]
        driver = info["driver"]
        trusted = info.get("trusted_connection", False)
        trusted_str = "Trusted_Connection=yes;" if trusted else ""

        odbc_str = (
            f"DRIVER={driver};"
            f"SERVER={servidor};"
            f"DATABASE={banco};"
            f"{trusted_str}"
        )

        string_conexao = f"mssql+pyodbc:///?odbc_connect={quote_plus(odbc_str)}"
        return sqlalchemy.create_engine(string_conexao).connect()

    elif info["tipo"] == "azure_sql":
        servidor = info["servidor"]
        banco = info.get("banco", "")
        driver = info["driver"]
        authentication = info["authentication"]
        usuario = info.get("usuario")
        senha = info.get("senha")

        odbc_str = (
            f"DRIVER={driver};"
            f"SERVER={servidor},1433;"
            f"DATABASE={banco};"
            f"Authentication={authentication};"
        )

        if usuario and senha:
            odbc_str += f"UID={usuario};PWD={senha};"

        string_conexao = f"mssql+pyodbc:///?odbc_connect={quote_plus(odbc_str)}"
        return sqlalchemy.create_engine(string_conexao).connect()

    elif info["tipo"] == "mdx":
        return info["str_conexao"]

    else:
        raise ValueError("Tipo de conex√£o n√£o suportado.")


def selecionar_consulta_por_nome(titulo: Union[str, List[str]]) -> Dict[str, pd.DataFrame]:
    """
    Executa uma ou mais consultas pelo nome l√≥gico definido no dicion√°rio `consultas`.
    Aceita:
        - String com nomes separados por v√≠rgula
        - Lista de strings

    Args:
        titulo (str ou list): Nome(s) da(s) consulta(s) a ser(em) executada(s).

    Returns:
        Dict[str, DataFrame]: Dicion√°rio com as chaves originais (nomes das consultas)
                              e os DataFrames resultantes.
    """
    if isinstance(titulo, str):
        nomes = [t.strip() for t in titulo.split(",")]
    elif isinstance(titulo, list):
        nomes = [t.strip() for t in titulo]
    else:
        raise ValueError("O par√¢metro 'titulo' deve ser uma string ou uma lista de strings.")

    resultados = {}

    for nome in nomes:
        nome_original = nome.strip()

        inicio = time.perf_counter()
        logger.info(f"‚õîÔ∏è Iniciando execu√ß√£o da consulta: '{nome_original}'")

        try:
            if nome_original in consultas:
                consulta = consultas[nome_original]
            elif nome_original.lower() in consultas:
                consulta = consultas[nome_original.lower()]
            elif nome_original.upper() in consultas:
                consulta = consultas[nome_original.upper()]
            else:
                raise ValueError(f"Consulta '{nome_original}' n√£o reconhecida.")

            logger.debug(f"Conex√£o usada: {consulta.conexao} | Tipo: {consulta.tipo}")

            df = CriadorDataFrame(
                funcao_conexao, consulta.conexao, consulta.sql, consulta.tipo
            ).executar()

            fim = time.perf_counter()
            tempo = fim - inicio
            linhas, colunas = df.shape
            memoria_mb = df.memory_usage(deep=True).sum() / 1024**2

            logger.info(f"‚úÖ Consulta '{nome_original}' finalizada em {tempo:.2f} segundos.")
            logger.info(f"üìä Linhas: {linhas} | Colunas: {colunas} | Mem√≥ria: {memoria_mb:.2f} MB")

            # Substitu√≠do print() por logger.info()
            logger.info(f"Resultado da consulta '{nome_original}':\n{df.head()}")

            resultados[nome_original] = df

        except Exception as e:
            logger.error(f"‚ùå Erro na consulta '{nome_original}': {str(e)}")
            
            resultados[nome_original] = pd.DataFrame()

    return resultados


def salvar_no_financa(df: pd.DataFrame, table_name: str):
    """
    Salva um DataFrame no SQL Server 'SPSVSQL39', banco 'FINANCA'.

    Args:
        df (pd.DataFrame): O DataFrame a ser salvo.
        table_name (str): O nome da tabela no banco de dados.
    """
    if df.empty:
        logger.warning(f"‚ö†Ô∏è DataFrame est√° vazio. Nada ser√° salvo na tabela '{table_name}'.")
        return

    try:
        logger.info(f"üìÄ Iniciando salvamento na tabela '{table_name}'...")
        inicio = time.perf_counter()

        # A fun√ß√£o funcao_conexao j√° √© local a este m√≥dulo
        engine = funcao_conexao("SPSVSQL39_FINANCA") # Usando o nome completo para clareza
        df.to_sql(name=table_name, con=engine, if_exists="replace", index=False)

        fim = time.perf_counter()
        tempo = fim - inicio

        logger.info(f"‚úÖ Salvamento conclu√≠do na tabela '{table_name}' em {tempo:.2f} segundos.")
    except Exception as e:
        logger.error(f"‚ùå Erro ao salvar no SQL: {str(e)}")
        

